# Comparative Stock Analysis Volume - I

**Introduction**
In today's article we will analyse stock market in banking segment. We will analyse the bank stocks which are listed in [NSE India](
https://www.nseindia.com/live_market/dynaContent/live_watch/pre_open_market/pre_open_market.htm). Objective is to find the trend (Seasonal)
or cyclic) /pattern in banking stocks. In our comparative analysis we will use several packages and the primary focus will be on *tidy verse*
package. The emphasis will be given on grouping with the help of tibble dataframe from *tidy verse* package. This will help to perform 
similar operation on multiple groups at a time, hence reducing the code length and computational time.

Additional information and tutorial is provided on "Qunadl" package. This focuses on API Key, database code search using quandl, and
finally how to directly download the data from R Console.

## Outline

The study is divided in two main groups,

* Volume - I*   

This contains descriptive analysis of stocks in terms of Daily/Weekly Price fluctuations. It also includes analysis on deviation from 
High and Low Price. The focus is also given on the relationship between the daily traded quantity of shares & close price and to check for 
the relationship. 
In the later part, the main focus is on xts package for the computation of Auto-correaltion. In this section focus is provided on lag and ggplot
has been use for the acf plot rather than using the conventional time series package. This includes the analysis on ACF using different 
lags and to check if there is any pattern in the series.

* Volume - II *

This section is focused on Predective Analytics. The study uses two different approach to predict the Stock Prices.
The first technique uses the Simple regression and the other one is fitting the ARIMA model to predict the stock prices.
Vol-II will be released in later half of this month. Please stay tuned...

### Required Packages

* Quandl             Data Download
* timetk             To coerce the dataframe into xts
* tidyverse          Use of tibble to group and perform single operation on multiple groups
* tidyquant          Time Series and Financial functions to perform the analysis
* gglot              Plot
* forcats            Modification factor levels
* stringr            For string use  

If you dont have any of the packages, then use the below code to install the packages

```
pckgs<-c("Quandl","Sweep","tidyverse","tidyquant","ggplot","forcats","stringr")
install.packages(pckgs,dependencies = TRUE)
```
Modify the pckgs variable if any of the above package is already installed.

## Let's Get Started

[Quandl](https://www.quandl.com/) is online repository for the core financial, macroeconomic statistics and forex. 
Quandl has a vast collection of free and open data collected from a variety of organizations: central banks, governments, 
multinational organizations and more. You can use it without payment and with few restrictions. 

Both Free and Premium data are available. 
Authenticated Free users have a limit of 300 calls per 10 seconds, 2,000 calls per 10 minutes and a limit of 50,000 calls
per day.
Premium data subscribers have a limit of 5,000 calls per 10 minutes and a limit of 720,000 calls per day.

We will use this online repository to get our data using "Quandl" package directly from the R Console. Quandl package directly interacts
with the Quandl API to offer data in a number of formats usable in R, downloading a zip with all data from a Quandl database, 
and the ability to search.

For More information on Quandl Package, please visit this [page](https://cran.r-project.org/web/packages/Quandl/Quandl.pdf)

First Step is to create an Account and get the quandl API key. Please click [here](https://www.quandl.com/) to create an account.
Please click on the Login button provided on the top right corner of the screen.
Once the registration is completed, please click [here](https://www.quandl.com/account/api) to get the API Key.

In our analysis, we have selected following banks

* ICICI
* BOB
* CANARA
* AXIS
* SBI
* PNB

We have selected these banks as they are in the price band of Rs 200 to Rs 500. We will use the following codes to get the data into 
R console,

### Code Break up

Quandl(Code="NSE/---",collapse="---",start_date="----",type="...")

* Code          Dataset code on Quandl specified as a string or an array of strings.              
* collapse      Collapse frequency of Data.Eg; "daily", "monthly", "weekly", "yearly".
* start_date    Desired Start Date
* type          Type  of  data  returned  specified  as  string.   Can  be  ’raw’,  ’ts’,  ’zoo’,  ’xts’  or ’timeSeries’


```
## Setup the Quandl Free Acount and API Key, Please copy and paste the API key in order to authinticate

Quandl.api_key("xRPW5yp-5pmJCQZqgNVN")

## Download the data Set
ICICI = Quandl("NSE/ICICIBANK",collapse="daily",start_date="2016-09-01",type="raw")
PNB= Quandl("NSE/PNB",collapse="daily",start_date="2016-09-01",type="raw")
Axis=Quandl("NSE/AXISBANK",collapse="daily",start_date="2016-09-01",type="raw")
Canara=Quandl("NSE/CANBK",collapse="daily",start_date="2016-09-01",type="raw")
BOB=Quandl("NSE/BANKBARODA",collapse="daily",start_date="2016-09-01",type="raw")
SBI=Quandl("NSE/SBIN",collapse="daily",start_date="2016-09-01",type="raw")

## Add another ("Stock") coloumn in Datasets using cbind command

ICICI<-cbind(ICICI,Stock="")
PNB<-cbind(PNB,Stock="")
Axis<-cbind(Axis,Stock="")
SBI<-cbind(SBI,Stock="")
Canara<-cbind(Canara,Stock="")
BOB<-cbind(BOB,Stock="")

## Paste the stock name in stock coloumn

ICICI$Stock<-paste(ICICI$Stock,"ICICI",sep="")
PNB$Stock<-paste(PNB$Stock,"PNB",sep="")
Axis$Stock<-paste(Axis$Stock,"Axis",sep="")
SBI$Stock<-paste(SBI$Stock,"SBI",sep="")
Canara$Stock<-paste(Canara$Stock,"Canara",sep="")
BOB$Stock<-paste(BOB$Stock,"BOB",sep="")

## Consolidate under one dataset

Master_Data<-rbind(ICICI,PNB,Axis,SBI,Canara,BOB)

##Check the format of date in Dataset

ICICI$Date[1:10]
PNB$Date[1:10]
Axis$Date[1:10]
SBI$Date[1:10]
Canara$Date[1:10]
BOB$Date[1:10]
```
In the above code, we've downloaded the data, added a column "Stock" for the stock indentifier, then we pasted the respective stock
name in the downlaoded dataset. At last we checked the date format for each and every stock, which is in the "y-m-d" format.

### "tidyVerse" to group the date by converting the dataset in tibble

Introduction of tidyverse package to cran has been major contribution to R community. [Hadley Wickham](http://hadley.nz/) 
is the author of this contribution and he has been also the author of popular packages like ggplot, dplyr and many others. 

Image of Hadley

Please click [here](https://cran.r-project.org/web/packages/tidyverse/tidyverse.pdf) to get the tidyverse R-documentation.

In this section, we will first group the master dataframe according by Stock. Then we will see the Daily price pattern for Stocks
using ggplot package.

We have heavily manipulated the theme section of ggplot to get the desired plot. More information on plot is provided 
[here](https://www.rdocumentation.org/packages/ggplot2/versions/2.2.1/topics/theme).

```
## Group the Data with tidyverse

Master_Data<-Master_Data%>%
  tibble::as_tibble() %>%
  group_by(Stock)

## Visualisation in ggplot2 ("Comparative Visulisation of Close Price listed on NSE)

Master_Data %>%
  ggplot(aes(x = Date, y = Close, color = Stock)) +
  geom_point() +
  labs(title = "Daily Close Price", x = "Month",y="Close Price") +
  facet_wrap(~ Stock, ncol = 3, scale = "free_y") +
  scale_fill_tq(fill="green4",theme="light") +
  theme_tq() +
  theme(panel.border = element_blank(), 
  	panel.grid.major = element_blank,
	panel.grid.minor = element_blank(),
	plot.title = element_text(hjust = 0.5,size=18,colour="indianred4"),
        axis.line = element_line(colour = "black"))+
  theme(legend.position="none")
```
```
R PLot

````

We have an idea of trend of the stock price, but not much is clear from the daily prices because of the presence of outlier.
In next section we will see the weekly pattern by using *tidyquant* package.

## Tidyquant Package

Image of Matt Dancho

Matt Dancho is the creator of the package "tidyquant", please check his page [here](http://www.business-science.io/serve/about.html)


### Density Distribution of Deviation of High Price from Open Price (Weekly Basis)

We will use the transmute_tq() function from tidyquant package to compute the weekly prices. Please click [here](https://cran.r-project.org/web/packages/tidyquant/tidyquant.pdf)
to get more information on the same.

You can also check the power of transmute_tq() function by this code,

```
tq_transmute_fun_options()

```

Image of transmute

CODE EXPLANATION

```

Master_Data_High<-Master_Data%>%mutate(Dev_High=High-Open)
Master_Data_Low<-Master_Data%>%mutate(Dev_Low=Open-Low)

## Deviation from High Price

Master_Data_High_Week <- Master_Data_High %>%
  tq_transmute(
    select     = Dev_High,
    mutate_fun = apply.weekly, 
    FUN        = mean,
    na.rm      = TRUE,
    col_rename = "Dev_High_Mean"
  )

## Density Distribution of Deviation of High Price from Open Price (Weekly Basis)

Master_Data_High_Week%>%ggplot(aes(x=Dev_High_Mean,color=Stock))+
  geom_density()+
  labs(title="Weekly Deviation from Open Price",x="Week")+
  facet_wrap(~Stock,ncol=3,scale="free_y")+
  scale_color_tq()+
  theme_tq()+
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(),
        axis.line = element_line(colour = "black"))+
theme(legend.position="none")

## Deviation from Low Price

Master_Data_Low_Week<-Master_Data_Low%>%
	tq_transmute(
		select 	= Dev_Low,
		mutate_fun = apply.weekly,
		FUN = mean,
		na.rm = TRUE,
		col_rename = "Dev_Low_Mean"
	)

## Density Distribution of Deviation of High Price from Open Price (Weekly Basis)

Master_Data_High_Week%>%ggplot(aes(x=Dev_High_Mean,color=Stock))+
  geom_dotplot(binwidth=0.75,aes(fill=Stock))+
  xlim(0,10)+
  scale_fill_manual(values=c("#999999", "#E69F00","#CC9933","#99FF00","#CC3399","#FF9933"))+
  labs(title="Distribution of Weekly Deviation from Open Price",x="Weekly Mean Deviation")+
  facet_wrap(~Stock,ncol=3,scale="free_y")+
  scale_color_tq(values=c("#999999"))+
  theme_tq()+
  theme(panel.border = element_blank(),
	panel.grid.major = element_line(colour = "grey61", size = 0.5, linetype = "dotted"),
	panel.grid.minor = element_blank(),
	axis.line=element_line(colour="black"),
	plot.title = element_text(hjust = 0.5,size=18,colour="indianred4"))+
  theme(legend.position="none")
```


