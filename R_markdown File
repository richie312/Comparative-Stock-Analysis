---
title: "Comparative Stock Analysis"
author: "Aritra Chatterjee"
date: "9 September 2017"
output: html_document
---
## Comparative Stock Analysis Volume - I

###Introduction

In today's article we will analyse stock market in banking segment. We will analyse the bank stocks which are listed in [NSE India](
https://www.nseindia.com/live_market/dynaContent/live_watch/pre_open_market/pre_open_market.htm). Objective is to find the trend (Seasonal)
or cyclic) /pattern in banking stocks. In our comparative analysis we will use several packages and the primary focus will be on *tidy verse*
package. The emphasis will be given on grouping with the help of tibble dataframe from *tidy verse* package. This will help to perform 
similar operation on multiple groups at a time, hence reducing the code length and computational time.

Additional information and tutorial is provided on "Qunadl" package. This focuses on API Key, database code search using quandl, and
finally how to directly download the data from R Console.

### Outline

The study is divided in two main groups,

* Volume - I*   

This contains descriptive analysis of stocks in terms of Daily/Weekly Price fluctuations. It also includes analysis on deviation from 
High and Low Price. The focus is also given on the relationship between the daily traded quantity of shares & close price and to check for 
the relationship. 
In the later part, the main focus is on xts package for the computation of Auto-correaltion. In this section focus is provided on lag and ggplot
has been use for the acf plot rather than using the conventional time series package. This includes the analysis on ACF using different 
lags and to check if there is any pattern in the series.

* Volume - II *

This section is focused on Predective Analytics. The study uses two different approach to predict the Stock Prices.
The first technique uses the Simple regression and the other one is fitting the ARIMA model to predict the stock prices.
Vol-II will be released in later half of this month. Please stay tuned...

### Required Packages

* Quandl             Data Download
* timetk             To coerce the dataframe into xts
* tidyverse          Use of tibble to group and perform single operation on multiple groups
* tidyquant          Time Series and Financial functions to perform the analysis
* gglot              Plot
* forcats            Modification factor levels
* stringr            For string use  

If you dont have any of the packages, then use the below code to install the packages

```
pckgs<-c("Quandl","Sweep","tidyverse","tidyquant","ggplot","forcats","stringr")
install.packages(pckgs,dependencies = TRUE)
```
Modify the pckgs variable if any of the above package is already installed.

## Let's Get Started

[Quandl](https://www.quandl.com/) is online repository for the core financial, macroeconomic statistics and forex. 
Quandl has a vast collection of free and open data collected from a variety of organizations: central banks, governments, 
multinational organizations and more. You can use it without payment and with few restrictions. 

Both Free and Premium data are available. 
Authenticated Free users have a limit of 300 calls per 10 seconds, 2,000 calls per 10 minutes and a limit of 50,000 calls
per day.
Premium data subscribers have a limit of 5,000 calls per 10 minutes and a limit of 720,000 calls per day.

We will use this online repository to get our data using "Quandl" package directly from the R Console. Quandl package directly interacts
with the Quandl API to offer data in a number of formats usable in R, downloading a zip with all data from a Quandl database, 
and the ability to search.

For More information on Quandl Package, please visit this [page](https://cran.r-project.org/web/packages/Quandl/Quandl.pdf)

First Step is to create an Account and get the quandl API key. Please click [here](https://www.quandl.com/) to create an account.
Please click on the Login button provided on the top right corner of the screen.
Once the registration is completed, please click [here](https://www.quandl.com/account/api) to get the API Key.

In our analysis, we have selected following banks

* ICICI
* BOB
* CANARA
* AXIS
* SBI
* PNB

We have selected these banks as they are in the price band of Rs 200 to Rs 500. We will use the following codes to get the data into 
R console,

### call the necessary package

```{r,eval=FALSE}
library(Quandl)
library(tidyverse)
library(ggplot2)
library(tidyquant)
library(timetk)
library(forcats)
library(stringr)
library(gganimate)
library(plyr)
```



### Code Break up

Quandl(Code="NSE/---",collapse="---",start_date="----",type="...")

* Code          Dataset code on Quandl specified as a string or an array of strings.              
* collapse      Collapse frequency of Data.Eg; "daily", "monthly", "weekly", "yearly".
* start_date    Desired Start Date
* type          Type  of  data  returned  specified  as  string.   Can  be  ’raw’,  ’ts’,  ’zoo’,  ’xts’  or ’timeSeries’


```{r,eval=FALSE}
## Setup the Quandl Free Acount and API Key, Please copy and paste the API key in order to #authinticate

Quandl.api_key("xRPW5yp-5pmJCQZqgNVN")

## Download the data Set
ICICI = Quandl("NSE/ICICIBANK",collapse="daily",start_date="2016-09-01",type="raw")
PNB= Quandl("NSE/PNB",collapse="daily",start_date="2016-09-01",type="raw")
Axis=Quandl("NSE/AXISBANK",collapse="daily",start_date="2016-09-01",type="raw")
Canara=Quandl("NSE/CANBK",collapse="daily",start_date="2016-09-01",type="raw")
BOB=Quandl("NSE/BANKBARODA",collapse="daily",start_date="2016-09-01",type="raw")
SBI=Quandl("NSE/SBIN",collapse="daily",start_date="2016-09-01",type="raw")

## Add another ("Stock") coloumn in Datasets using cbind command

ICICI<-cbind(ICICI,Stock="")
PNB<-cbind(PNB,Stock="")
Axis<-cbind(Axis,Stock="")
SBI<-cbind(SBI,Stock="")
Canara<-cbind(Canara,Stock="")
BOB<-cbind(BOB,Stock="")

## Paste the stock name in stock coloumn

ICICI$Stock<-paste(ICICI$Stock,"ICICI",sep="")
PNB$Stock<-paste(PNB$Stock,"PNB",sep="")
Axis$Stock<-paste(Axis$Stock,"Axis",sep="")
SBI$Stock<-paste(SBI$Stock,"SBI",sep="")
Canara$Stock<-paste(Canara$Stock,"Canara",sep="")
BOB$Stock<-paste(BOB$Stock,"BOB",sep="")

## Consolidate under one dataset

Master_Data<-rbind(ICICI,PNB,Axis,SBI,Canara,BOB)

```
In the above code, we've downloaded the data, added a column "Stock" for the stock indentifier, then we pasted the respective stock
name in the downlaoded dataset. At last we consolidated all stock data into one Master Data frame.

### Tidyverse Package

####Introduction of tidyverse package by Hadley Wickham to cran has been major contribution to R community. [Hadley Wickham](http://hadley.nz/) 

He is the author of this contribution and he had major contributor in R-Community. He is the creator pf packages like ggplot, dplyr and many others. 

<img src="C:\Users\ACER PC\Documents\R_Projects\Bank_Stock_Comparative_Analysis\hadley-wickham.jpg" width="500" height="300">

Please click [here](https://cran.r-project.org/web/packages/tidyverse/tidyverse.pdf)
to get the tidyverse R-documentation.

In this section, we will first group the master dataframe according by Stock. Then we will see the Daily price pattern for Stocks
using ggplot package.

We have heavily manipulated the theme section of ggplot to get the desired plot. More information on plot is provided 
[here](https://www.rdocumentation.org/packages/ggplot2/versions/2.2.1/topics/theme).

```{r,eval=FALSE}
## Visualisation in ggplot2 ("Comparative Visulisation of Close Price listed on NSE)

## Convert the dates into character in order to split the coloumn into "Y" "m" "dd"" columns
Master_Data$Date<-as.character(Master_Data$Date)

## Split the date and create a list for the same

list<-strsplit(Master_Data$Date,"-")

## Convert the list into dataframe
library(plyr)
Master_Date1<-ldply(list)
colnames(Master_Date1)<-c("Year","Month","Day")

## Column bind with the main dataframe
Master_Data<-cbind(Master_Data,Master_Date1)
names(Master_Data)

## Change the scale for Traded Quantity

Master_Data$`Total Trade Quantity`<-Master_Data$`Total Trade Quantity`/100000

## Convert the Date to as.Date()

Master_Data$Date<-as.Date(Master_Data$Date)

## Visualisation with Bubble Plot
P<- ggplot(Master_Data,aes(factor(Stock),Close,color=Stock,frame=Month)) +
  geom_jitter(aes(size = Close, colour=Stock, alpha=.02)) +
  ylim(0,1000)+
  labs(title = "Bank Stock Monthly Prices", x = "Close Price", y= "Banks") +
  theme(panel.border = element_blank(),
        panel.grid.major = element_line(colour = "grey61", size = 0.5, linetype = "dotted"),
        panel.grid.minor = element_blank(),
        axis.line=element_line(colour="black"),
        plot.title = element_text(hjust = 0.5,size=18,colour="indianred4"))+
  theme(legend.position="none")

P1<-gganimate(P,'Price_Range.gif',ani.width=600,ani.height=400,interval=1)

## Group By Stock

Master_Data<-Master_Data%>%
  tibble::as.tibble()%>%
  group_by(Stock)

## Visualisation for Daily Stock Prices

Master_Data %>%
  ggplot(aes(x = Date, y = Close, color = Stock)) +
  geom_point() +
  labs(title = "Daily Close Price", x = "Month",y="Close Price") +
  facet_wrap(~ Stock, ncol = 3, scale = "free_y") +
  scale_fill_tq(fill="green4",theme="light") +
  theme_tq() +
  theme(panel.border = element_blank(),
        panel.grid.major = element_line(colour = "grey61", size = 0.5, linetype = "dotted"),
        panel.grid.minor = element_blank(),
        axis.line=element_line(colour="black"),
        plot.title = element_text(hjust = 0.5,size=18,colour="indianred4"))+
  theme(legend.position="none")

```
![Monthly Prices](C:\Users\ACER PC\Documents\R_Projects\Bank_Stock_Comparative_Analysis\Price_Range.gif)

![Daily Stock Prices](C:\Users\ACER PC\Documents\R_Projects\Bank_Stock_Comparative_Analysis\Daily.close.jpg)


We have an idea of trend of the stock price, but not much is clear from the Monthly prices. Axis Bank share price improved in september and
stayed at Rs750 for a month. whereas all other Banks were consistent and did not show much of volatility.

In next section we will see the weekly pattern by using *tidyquant* package.

## Tidyquant Package

<img src="C:\Users\ACER PC\Documents\R_Projects\Bank_Stock_Comparative_Analysis\Matt dancho.jpg" width="300" height="300">

Matt Dancho is the creator of the package "tidyquant", please check his page [here](http://www.business-science.io/serve/about.html)


### Density Distribution of Deviation of High Price from Open Price (Weekly Basis)

We will use the transmute_tq() function from tidyquant package to compute the weekly prices. Please click [here](https://cran.r-project.org/web/packages/tidyquant/tidyquant.pdf)
to get more information on the same.

You can also check the power of transmute_tq() function by this code,

```
tq_transmute_fun_options()

```

![transmute_fun_options](C:\Users\ACER PC\Documents\R_Projects\Bank_Stock_Comparative_Analysis\transmute_img.png)


### Density Distribution of Deviation of High & Low Price from Open Price (Weekly Basis)

In this section, we will see the density distribution of **High Price** from **Open Price** in order to get an understanding that how much
price is deviating in either direction (North or South) on weekly basis. This gives us an idea of price range for any stock in intraday
trading. 

##### Steps

*Add a new column with the difference of high and open price using mutate function.
*Add another new column with the difference of low and open price using mutate function.
*Calculate the weekly average of differences using "tq_transmute()" function from tidyverse package.
*Visualisation of both density plots with dot distribution on ggplot

```{r,eval=FALSE}
## Deviation from High & Low Price
Master_Data_High<-Master_Data%>%mutate(Dev_High=High-Open)
Master_Data_Low<-Master_Data%>%mutate(Dev_Low=Open-Low)

## Computation of weekly average for high Price

Master_Data_High_Week <- Master_Data_High %>%
  tq_transmute(
    select     = Dev_High,
    mutate_fun = apply.weekly, 
    FUN        = mean,
    na.rm      = TRUE,
    col_rename = "Dev_High_Mean"
  )

## Computation weekly average for Low Price

Master_Data_Low_Week<-Master_Data_Low%>%
	tq_transmute(
		select 	= Dev_Low,
		mutate_fun = apply.weekly,
		FUN = mean,
		na.rm = TRUE,
		col_rename = "Dev_Low_Mean"
	)

## Visualisation of density distribution of High Price

High<-Master_Data_High_Week%>%ggplot(aes(x=Dev_High_Mean,color=Stock))+
  geom_dotplot(binwidth=0.50,aes(fill=Stock))+
  xlim(0,10)+
  scale_fill_manual(values=c("#999999", "#E69F00","#CC9933","#99FF00","#CC3399","#FF9933"))+
  labs(title="Distribution of High Price Deviation from Open Price",x="Weekly Mean Deviation")+
  facet_wrap(~Stock,ncol=3,scale="free_y")+
  scale_color_tq(values=c("#999999"))+
  theme_tq()+
  theme(panel.border = element_blank(),
        panel.grid.major = element_line(colour = "grey61", size = 0.5, linetype = "dotted"),
        panel.grid.minor = element_blank(),
        axis.line=element_line(colour="black"),
        plot.title = element_text(hjust = 0.5,size=16,colour="indianred4"))+
  theme(legend.position="none")

## Visualisation of density distribution of Low Price

Low<-Master_Data_Low_Week%>%ggplot(aes(x=Dev_Low_Mean,color=Stock))+
  geom_dotplot(binwidth=0.50,aes(fill=Stock))+
  xlim(0,10)+
  scale_fill_manual(values=c("#999999", "#E69F00","#CC9933","#99FF00","#CC3399","#FF9933"))+
  labs(title="Distribution of Weekly Low Price Deviation from Open Price",x="Weekly Mean Deviation")+
  facet_wrap(~Stock,ncol=3,scale="free_y")+
  scale_color_tq(values=c("#999999"))+
  theme_tq()+
  theme(panel.border = element_blank(),
        panel.grid.major = element_line(colour = "grey61", size = 0.5, linetype = "dotted"),
        panel.grid.minor = element_blank(),
        axis.line=element_line(colour="black"),
        plot.title = element_text(hjust = 0.5,size=16,colour="indianred4"))+
  theme(legend.position="none")

## Arrange

grid.arrange(High,Low,ncol = 2, nrow = 1)
```

![](C:\Users\ACER PC\Documents\R_Projects\Bank_Stock_Comparative_Analysis\HP.LP.DEV.jpeg)

### Total Traded Quantity vs Close Price

In this section, we will find the relationship between traded quantity and Close price (if any). Usually, traded quantity increases if the
stock price increases or decreases too rapidly on a given day. This parameter is important for our model for prediction which will be 
dicussed in more details in next Volume -II.


```{r,eval=FALSE}
Master_Data_Trade<-Master_Data%>%
  tq_transmute(
    select 	= c(`Total Trade Quantity`,Close),
    mutate_fun = apply.weekly,
    FUN = mean,
    na.rm = TRUE,
    col_rename = c("Trade_qty","Close_Mean")
  )
## Visualisation with ggplot

Master_Data_Trade%>%ggplot(aes(x=Trade_qty,y=Close_Mean,color=Stock))+
  geom_smooth(method='loess')+
  xlim(0,400)+
  labs(title="Close Price vs Traded Quantity",x="Traded Qty in lacs",y="Weekly Close Price")+
  facet_wrap(~Stock,ncol=3,scale="free_y")+
  scale_color_tq()+
  theme_tq()+
  theme(panel.border = element_blank(),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        axis.line=element_line(colour="black"),
        plot.title = element_text(hjust = 0.5,size=18,colour="indianred4"))+
  theme(legend.position="none")
```

![](C:\Users\ACER PC\Documents\R_Projects\Bank_Stock_Comparative_Analysis\Close.Trade.jpeg)

### Autocorrelation (ACF) lags with tidyverse.
#### Lags
The lag operator (also known as backshift operator) is a function that shifts (offsets) a time series such that the “lagged” values
are aligned with the actual time series. The lags can be shifted any number of units, which simply controls the length of the backshift.

Here, "k" is denoted as lag. We will see the lag of 180 days period and see how stocks behave.

#### Steps for Computation

* Define k lag period
* Create columns for lag periods
* Group the data by Stock by creating new data frame for lags
* Apply lag.xts using tq_mutate() function on the new dataframe
* Apply Auto-correaltion


```{r,eval=FALSE}
k <- 1:180
col_names <- paste0("lag_", k)

## Only Select Columns "Date" and "Close" from hte master data frame.

Master_Data_lags<-Master_Data%>%
  tibble::as_tibble() %>%
  group_by(Stock)
Master_Data_lags<-Master_Data_lags%>%select(Date,Close)

# Apply lag.xts function using tq_mutate

Master_Data_lags<-Master_Data_lags%>%
tq_mutate(
	select = Close,
	mutate_fun = lag.xts,
	k=1:180,
	col_rename=col_names
	)
# Calculate the autocorrelations and 95% cutoffs

Master_Data_AutoCorrelations<-Master_Data_lags %>%
    gather(key = "lag", value = "lag_value", -c(Stock,Date, Close)) %>%
    mutate(lag = str_sub(lag, start = 5) %>% as.numeric) %>%
    group_by(Stock, lag) %>%
    summarize(
        cor = cor(x = Close, y = lag_value, use = "pairwise.complete.obs"),
        cutoff_upper = 2/(n())^0.5,
        cutoff_lower = -2/(n())^0.5
        )

## Visualisation of Autocorrelation: ACF Plot

Master_Data_AutoCorrelations %>%
  ggplot(aes(x = lag, y = cor, color = Stock, group = Stock)) +
  # Add horizontal line a y=0
  geom_hline(yintercept = 0) +
  # Plot autocorrelations
  geom_point(size = 2) +
  geom_segment(aes(xend = lag, yend = 0), size = 1) +
  # Add cutoffs
  geom_line(aes(y = cutoff_upper), color = "blue", linetype = 2) +
  geom_line(aes(y = cutoff_lower), color = "blue", linetype = 2) +
  # Add facets
  facet_wrap(~ Stock, ncol = 3) +
  # Aesthetics
  expand_limits(y = c(-1, 1)) +
  scale_color_tq() +
  theme_tq() +
  labs(
    title = paste0("Tidyverse ACF Plot: Lags ", rlang::expr_text(k)),
    x = "Lags"
  ) +
  theme(
    legend.position = "none",
    axis.text.x = element_text(angle = 45, hjust = 1),
    panel.grid.major = element_line(colour = "grey61", size = 0.5, linetype = "dotted"),
    plot.title = element_text(hjust = 0.5,size=18,colour="indianred4")
  )
```

![](C:\Users\ACER PC\Documents\R_Projects\Bank_Stock_Comparative_Analysis\Acf.plot.jpeg)
